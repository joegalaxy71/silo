// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Outcome struct {
	Error                bool     `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Outcome) Reset()         { *m = Outcome{} }
func (m *Outcome) String() string { return proto.CompactTextString(m) }
func (*Outcome) ProtoMessage()    {}
func (*Outcome) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *Outcome) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Outcome.Unmarshal(m, b)
}
func (m *Outcome) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Outcome.Marshal(b, m, deterministic)
}
func (m *Outcome) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Outcome.Merge(m, src)
}
func (m *Outcome) XXX_Size() int {
	return xxx_messageInfo_Outcome.Size(m)
}
func (m *Outcome) XXX_DiscardUnknown() {
	xxx_messageInfo_Outcome.DiscardUnknown(m)
}

var xxx_messageInfo_Outcome proto.InternalMessageInfo

func (m *Outcome) GetError() bool {
	if m != nil {
		return m.Error
	}
	return false
}

func (m *Outcome) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Unit struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Unit) Reset()         { *m = Unit{} }
func (m *Unit) String() string { return proto.CompactTextString(m) }
func (*Unit) ProtoMessage()    {}
func (*Unit) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *Unit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Unit.Unmarshal(m, b)
}
func (m *Unit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Unit.Marshal(b, m, deterministic)
}
func (m *Unit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Unit.Merge(m, src)
}
func (m *Unit) XXX_Size() int {
	return xxx_messageInfo_Unit.Size(m)
}
func (m *Unit) XXX_DiscardUnknown() {
	xxx_messageInfo_Unit.DiscardUnknown(m)
}

var xxx_messageInfo_Unit proto.InternalMessageInfo

func (m *Unit) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Units struct {
	Unit                 []*Units `protobuf:"bytes,1,rep,name=Unit,proto3" json:"Unit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Units) Reset()         { *m = Units{} }
func (m *Units) String() string { return proto.CompactTextString(m) }
func (*Units) ProtoMessage()    {}
func (*Units) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

func (m *Units) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Units.Unmarshal(m, b)
}
func (m *Units) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Units.Marshal(b, m, deterministic)
}
func (m *Units) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Units.Merge(m, src)
}
func (m *Units) XXX_Size() int {
	return xxx_messageInfo_Units.Size(m)
}
func (m *Units) XXX_DiscardUnknown() {
	xxx_messageInfo_Units.DiscardUnknown(m)
}

var xxx_messageInfo_Units proto.InternalMessageInfo

func (m *Units) GetUnit() []*Units {
	if m != nil {
		return m.Unit
	}
	return nil
}

type Node struct {
	Outcome              *Outcome `protobuf:"bytes,1,opt,name=Outcome,proto3" json:"Outcome,omitempty"`
	Hostname             string   `protobuf:"bytes,2,opt,name=Hostname,proto3" json:"Hostname,omitempty"`
	Ip                   string   `protobuf:"bytes,3,opt,name=Ip,proto3" json:"Ip,omitempty"`
	Poolname             string   `protobuf:"bytes,4,opt,name=Poolname,proto3" json:"Poolname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetOutcome() *Outcome {
	if m != nil {
		return m.Outcome
	}
	return nil
}

func (m *Node) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Node) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Node) GetPoolname() string {
	if m != nil {
		return m.Poolname
	}
	return ""
}

type Nodes struct {
	Outcome              *Outcome `protobuf:"bytes,1,opt,name=Outcome,proto3" json:"Outcome,omitempty"`
	Node                 []*Nodes `protobuf:"bytes,2,rep,name=Node,proto3" json:"Node,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Nodes) Reset()         { *m = Nodes{} }
func (m *Nodes) String() string { return proto.CompactTextString(m) }
func (*Nodes) ProtoMessage()    {}
func (*Nodes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}

func (m *Nodes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nodes.Unmarshal(m, b)
}
func (m *Nodes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nodes.Marshal(b, m, deterministic)
}
func (m *Nodes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nodes.Merge(m, src)
}
func (m *Nodes) XXX_Size() int {
	return xxx_messageInfo_Nodes.Size(m)
}
func (m *Nodes) XXX_DiscardUnknown() {
	xxx_messageInfo_Nodes.DiscardUnknown(m)
}

var xxx_messageInfo_Nodes proto.InternalMessageInfo

func (m *Nodes) GetOutcome() *Outcome {
	if m != nil {
		return m.Outcome
	}
	return nil
}

func (m *Nodes) GetNode() []*Nodes {
	if m != nil {
		return m.Node
	}
	return nil
}

type Master struct {
	Outcome              *Outcome `protobuf:"bytes,1,opt,name=Outcome,proto3" json:"Outcome,omitempty"`
	Hostname             string   `protobuf:"bytes,2,opt,name=Hostname,proto3" json:"Hostname,omitempty"`
	Ip                   string   `protobuf:"bytes,3,opt,name=Ip,proto3" json:"Ip,omitempty"`
	Poolname             string   `protobuf:"bytes,4,opt,name=Poolname,proto3" json:"Poolname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Master) Reset()         { *m = Master{} }
func (m *Master) String() string { return proto.CompactTextString(m) }
func (*Master) ProtoMessage()    {}
func (*Master) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}

func (m *Master) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Master.Unmarshal(m, b)
}
func (m *Master) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Master.Marshal(b, m, deterministic)
}
func (m *Master) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Master.Merge(m, src)
}
func (m *Master) XXX_Size() int {
	return xxx_messageInfo_Master.Size(m)
}
func (m *Master) XXX_DiscardUnknown() {
	xxx_messageInfo_Master.DiscardUnknown(m)
}

var xxx_messageInfo_Master proto.InternalMessageInfo

func (m *Master) GetOutcome() *Outcome {
	if m != nil {
		return m.Outcome
	}
	return nil
}

func (m *Master) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Master) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Master) GetPoolname() string {
	if m != nil {
		return m.Poolname
	}
	return ""
}

type Solution struct {
	Outcome              *Outcome `protobuf:"bytes,1,opt,name=Outcome,proto3" json:"Outcome,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Solution) Reset()         { *m = Solution{} }
func (m *Solution) String() string { return proto.CompactTextString(m) }
func (*Solution) ProtoMessage()    {}
func (*Solution) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}

func (m *Solution) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Solution.Unmarshal(m, b)
}
func (m *Solution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Solution.Marshal(b, m, deterministic)
}
func (m *Solution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Solution.Merge(m, src)
}
func (m *Solution) XXX_Size() int {
	return xxx_messageInfo_Solution.Size(m)
}
func (m *Solution) XXX_DiscardUnknown() {
	xxx_messageInfo_Solution.DiscardUnknown(m)
}

var xxx_messageInfo_Solution proto.InternalMessageInfo

func (m *Solution) GetOutcome() *Outcome {
	if m != nil {
		return m.Outcome
	}
	return nil
}

func (m *Solution) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Solutions struct {
	Outcome              *Outcome     `protobuf:"bytes,1,opt,name=Outcome,proto3" json:"Outcome,omitempty"`
	Solution             []*Solutions `protobuf:"bytes,2,rep,name=Solution,proto3" json:"Solution,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Solutions) Reset()         { *m = Solutions{} }
func (m *Solutions) String() string { return proto.CompactTextString(m) }
func (*Solutions) ProtoMessage()    {}
func (*Solutions) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}

func (m *Solutions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Solutions.Unmarshal(m, b)
}
func (m *Solutions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Solutions.Marshal(b, m, deterministic)
}
func (m *Solutions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Solutions.Merge(m, src)
}
func (m *Solutions) XXX_Size() int {
	return xxx_messageInfo_Solutions.Size(m)
}
func (m *Solutions) XXX_DiscardUnknown() {
	xxx_messageInfo_Solutions.DiscardUnknown(m)
}

var xxx_messageInfo_Solutions proto.InternalMessageInfo

func (m *Solutions) GetOutcome() *Outcome {
	if m != nil {
		return m.Outcome
	}
	return nil
}

func (m *Solutions) GetSolution() []*Solutions {
	if m != nil {
		return m.Solution
	}
	return nil
}

type Void struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}

func (m *Void) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Void.Unmarshal(m, b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Void.Marshal(b, m, deterministic)
}
func (m *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(m, src)
}
func (m *Void) XXX_Size() int {
	return xxx_messageInfo_Void.Size(m)
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Outcome)(nil), "api.Outcome")
	proto.RegisterType((*Unit)(nil), "api.Unit")
	proto.RegisterType((*Units)(nil), "api.Units")
	proto.RegisterType((*Node)(nil), "api.Node")
	proto.RegisterType((*Nodes)(nil), "api.Nodes")
	proto.RegisterType((*Master)(nil), "api.Master")
	proto.RegisterType((*Solution)(nil), "api.Solution")
	proto.RegisterType((*Solutions)(nil), "api.Solutions")
	proto.RegisterType((*Void)(nil), "api.Void")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 497 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x55, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xcd, 0x87, 0xe3, 0xc4, 0x93, 0x36, 0xa0, 0x15, 0x07, 0xcb, 0x87, 0x2a, 0x2c, 0x15, 0x44,
	0x1c, 0x02, 0x98, 0x13, 0xc7, 0xd0, 0x82, 0x88, 0x04, 0x6d, 0xb5, 0x15, 0xbd, 0xa2, 0x6d, 0xbc,
	0x2a, 0x56, 0x1d, 0xcf, 0x6a, 0x77, 0x53, 0x95, 0x7f, 0xc3, 0xaf, 0xe1, 0x77, 0xa1, 0x5d, 0xc7,
	0x4e, 0x72, 0x28, 0xb1, 0x2f, 0x70, 0xe1, 0xb6, 0x6f, 0xe6, 0xbd, 0x79, 0x6f, 0x3f, 0x2c, 0x43,
	0xc0, 0x65, 0x3a, 0x95, 0x0a, 0x0d, 0x92, 0x2e, 0x97, 0x29, 0x7d, 0x07, 0xfd, 0xf3, 0x95, 0x59,
	0xe0, 0x52, 0x90, 0x27, 0xd0, 0x13, 0x4a, 0xa1, 0x0a, 0xdb, 0xe3, 0xf6, 0x64, 0xc0, 0x0a, 0x40,
	0x42, 0xe8, 0x2f, 0x85, 0xd6, 0xfc, 0x46, 0x84, 0x9d, 0x71, 0x7b, 0x12, 0xb0, 0x12, 0xd2, 0x08,
	0xbc, 0xaf, 0x79, 0x6a, 0x08, 0x01, 0xef, 0x8c, 0x2f, 0x85, 0x93, 0x05, 0xcc, 0xad, 0xe9, 0x0b,
	0xe8, 0xd9, 0x9e, 0x26, 0x47, 0x05, 0x29, 0x6c, 0x8f, 0xbb, 0x93, 0x61, 0x0c, 0x53, 0x6b, 0xef,
	0x3a, 0xcc, 0xd5, 0xe9, 0x1d, 0x78, 0x67, 0x98, 0x08, 0xf2, 0xbc, 0xca, 0xe1, 0xe6, 0x0c, 0xe3,
	0x03, 0x47, 0x5d, 0xd7, 0x58, 0x15, 0x32, 0x82, 0xc1, 0x27, 0xd4, 0x26, 0xb7, 0x86, 0x45, 0x9e,
	0x0a, 0x93, 0x11, 0x74, 0xe6, 0x32, 0xec, 0xba, 0x6a, 0x67, 0x2e, 0x2d, 0xf7, 0x02, 0x31, 0x73,
	0x5c, 0xaf, 0xe0, 0x96, 0x98, 0x9e, 0x43, 0xcf, 0xfa, 0xea, 0xda, 0xc6, 0x47, 0x45, 0xd0, 0xb0,
	0xb3, 0xb5, 0x11, 0x37, 0x81, 0xb9, 0x3a, 0xbd, 0x07, 0xff, 0x0b, 0xd7, 0x46, 0xa8, 0xbf, 0xbe,
	0x95, 0x8f, 0x30, 0xb8, 0xc4, 0x6c, 0x65, 0x52, 0xcc, 0x6b, 0x7b, 0x97, 0x77, 0xd6, 0xd9, 0xba,
	0xb3, 0x6f, 0x10, 0x94, 0x73, 0xea, 0x1f, 0xcb, 0xcb, 0x8d, 0xf9, 0xfa, 0x68, 0x46, 0x8e, 0x58,
	0x4d, 0x62, 0x55, 0x9f, 0xfa, 0xe0, 0x5d, 0x61, 0x9a, 0xc4, 0x3f, 0x7d, 0xf0, 0x66, 0x3a, 0x49,
	0xc8, 0x31, 0xf4, 0xaf, 0x84, 0xd2, 0x36, 0x78, 0xe0, 0x54, 0xb6, 0x1d, 0xed, 0x38, 0xd1, 0x16,
	0x99, 0x00, 0x14, 0x27, 0x3b, 0xb7, 0xaf, 0x6d, 0xe8, 0xba, 0x45, 0x21, 0xda, 0x06, 0xb4, 0x45,
	0x9e, 0x42, 0xdf, 0xde, 0xc5, 0x2c, 0x49, 0xd6, 0xf3, 0x2c, 0x8a, 0x36, 0x4b, 0xda, 0x22, 0xc7,
	0x00, 0x76, 0xc5, 0xc4, 0x12, 0xef, 0xc4, 0x83, 0xac, 0x67, 0x10, 0xd8, 0xd5, 0xc5, 0x4a, 0xdd,
	0x3c, 0x4c, 0x7a, 0x0d, 0xa3, 0x72, 0x6b, 0x27, 0x4a, 0x70, 0x23, 0xc8, 0xe1, 0xce, 0xd6, 0xa3,
	0x5d, 0x48, 0x5b, 0xe4, 0x0d, 0x3c, 0x2a, 0xd1, 0xa9, 0xd0, 0x46, 0xe1, 0x8f, 0xbd, 0x92, 0x2d,
	0x93, 0xf7, 0x7c, 0x71, 0xbb, 0x92, 0x4d, 0x4c, 0x98, 0xd0, 0x06, 0x95, 0x68, 0x62, 0x72, 0x2a,
	0x64, 0xd6, 0x2c, 0x16, 0x13, 0x26, 0xad, 0xe1, 0xf1, 0x0a, 0x0e, 0x4b, 0x74, 0x69, 0xb8, 0x32,
	0x7b, 0x05, 0x53, 0x38, 0xd8, 0x08, 0x50, 0x36, 0x89, 0xf4, 0xe1, 0x5e, 0xa2, 0x6e, 0x74, 0x1d,
	0x27, 0x98, 0x1b, 0x9e, 0xe6, 0x7b, 0x25, 0x31, 0x3c, 0xae, 0x42, 0xe5, 0x5c, 0xea, 0xef, 0x68,
	0x9a, 0x68, 0x18, 0x66, 0xd9, 0x35, 0x5f, 0xdc, 0xee, 0xd3, 0xc4, 0xbf, 0xba, 0xe0, 0xcf, 0x74,
	0xf2, 0x59, 0x98, 0x9a, 0x1f, 0xc9, 0x3f, 0x7b, 0xfa, 0xff, 0x1f, 0xcc, 0x9f, 0x24, 0xd7, 0xbe,
	0xfb, 0xd7, 0xbe, 0xfd, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x42, 0xc9, 0xbf, 0xe1, 0x78, 0x07, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AsddClient is the client API for Asdd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AsddClient interface {
	Version(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Outcome, error)
	MasterInit(ctx context.Context, in *Master, opts ...grpc.CallOption) (*Master, error)
	NodeAdd(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error)
	NodeRemove(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error)
	NodePurge(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error)
	SolutionCreate(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Solution, error)
	SolutionDestroy(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Solution, error)
	SolutionBackup(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Solution, error)
	SolutionRestore(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Solution, error)
	SolutionDeploy(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Solution, error)
	SolutionRetire(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Solution, error)
	SolutionStart(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Solution, error)
	SolutionStop(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Solution, error)
	SolutionExpose(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Solution, error)
	SolutionContain(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Solution, error)
	SolutionSnapshot(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Solution, error)
	SolutionRollback(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Solution, error)
}

type asddClient struct {
	cc *grpc.ClientConn
}

func NewAsddClient(cc *grpc.ClientConn) AsddClient {
	return &asddClient{cc}
}

func (c *asddClient) Version(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := c.cc.Invoke(ctx, "/api.Asdd/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asddClient) MasterInit(ctx context.Context, in *Master, opts ...grpc.CallOption) (*Master, error) {
	out := new(Master)
	err := c.cc.Invoke(ctx, "/api.Asdd/MasterInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asddClient) NodeAdd(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/api.Asdd/NodeAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asddClient) NodeRemove(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/api.Asdd/NodeRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asddClient) NodePurge(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/api.Asdd/NodePurge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asddClient) SolutionCreate(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Solution, error) {
	out := new(Solution)
	err := c.cc.Invoke(ctx, "/api.Asdd/SolutionCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asddClient) SolutionDestroy(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Solution, error) {
	out := new(Solution)
	err := c.cc.Invoke(ctx, "/api.Asdd/SolutionDestroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asddClient) SolutionBackup(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Solution, error) {
	out := new(Solution)
	err := c.cc.Invoke(ctx, "/api.Asdd/SolutionBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asddClient) SolutionRestore(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Solution, error) {
	out := new(Solution)
	err := c.cc.Invoke(ctx, "/api.Asdd/SolutionRestore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asddClient) SolutionDeploy(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Solution, error) {
	out := new(Solution)
	err := c.cc.Invoke(ctx, "/api.Asdd/SolutionDeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asddClient) SolutionRetire(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Solution, error) {
	out := new(Solution)
	err := c.cc.Invoke(ctx, "/api.Asdd/SolutionRetire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asddClient) SolutionStart(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Solution, error) {
	out := new(Solution)
	err := c.cc.Invoke(ctx, "/api.Asdd/SolutionStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asddClient) SolutionStop(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Solution, error) {
	out := new(Solution)
	err := c.cc.Invoke(ctx, "/api.Asdd/SolutionStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asddClient) SolutionExpose(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Solution, error) {
	out := new(Solution)
	err := c.cc.Invoke(ctx, "/api.Asdd/SolutionExpose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asddClient) SolutionContain(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Solution, error) {
	out := new(Solution)
	err := c.cc.Invoke(ctx, "/api.Asdd/SolutionContain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asddClient) SolutionSnapshot(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Solution, error) {
	out := new(Solution)
	err := c.cc.Invoke(ctx, "/api.Asdd/SolutionSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asddClient) SolutionRollback(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Solution, error) {
	out := new(Solution)
	err := c.cc.Invoke(ctx, "/api.Asdd/SolutionRollback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AsddServer is the server API for Asdd service.
type AsddServer interface {
	Version(context.Context, *Void) (*Outcome, error)
	MasterInit(context.Context, *Master) (*Master, error)
	NodeAdd(context.Context, *Node) (*Node, error)
	NodeRemove(context.Context, *Node) (*Node, error)
	NodePurge(context.Context, *Node) (*Node, error)
	SolutionCreate(context.Context, *Solution) (*Solution, error)
	SolutionDestroy(context.Context, *Solution) (*Solution, error)
	SolutionBackup(context.Context, *Solution) (*Solution, error)
	SolutionRestore(context.Context, *Solution) (*Solution, error)
	SolutionDeploy(context.Context, *Solution) (*Solution, error)
	SolutionRetire(context.Context, *Solution) (*Solution, error)
	SolutionStart(context.Context, *Solution) (*Solution, error)
	SolutionStop(context.Context, *Solution) (*Solution, error)
	SolutionExpose(context.Context, *Solution) (*Solution, error)
	SolutionContain(context.Context, *Solution) (*Solution, error)
	SolutionSnapshot(context.Context, *Solution) (*Solution, error)
	SolutionRollback(context.Context, *Solution) (*Solution, error)
}

// UnimplementedAsddServer can be embedded to have forward compatible implementations.
type UnimplementedAsddServer struct {
}

func (*UnimplementedAsddServer) Version(ctx context.Context, req *Void) (*Outcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (*UnimplementedAsddServer) MasterInit(ctx context.Context, req *Master) (*Master, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MasterInit not implemented")
}
func (*UnimplementedAsddServer) NodeAdd(ctx context.Context, req *Node) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeAdd not implemented")
}
func (*UnimplementedAsddServer) NodeRemove(ctx context.Context, req *Node) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeRemove not implemented")
}
func (*UnimplementedAsddServer) NodePurge(ctx context.Context, req *Node) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodePurge not implemented")
}
func (*UnimplementedAsddServer) SolutionCreate(ctx context.Context, req *Solution) (*Solution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolutionCreate not implemented")
}
func (*UnimplementedAsddServer) SolutionDestroy(ctx context.Context, req *Solution) (*Solution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolutionDestroy not implemented")
}
func (*UnimplementedAsddServer) SolutionBackup(ctx context.Context, req *Solution) (*Solution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolutionBackup not implemented")
}
func (*UnimplementedAsddServer) SolutionRestore(ctx context.Context, req *Solution) (*Solution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolutionRestore not implemented")
}
func (*UnimplementedAsddServer) SolutionDeploy(ctx context.Context, req *Solution) (*Solution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolutionDeploy not implemented")
}
func (*UnimplementedAsddServer) SolutionRetire(ctx context.Context, req *Solution) (*Solution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolutionRetire not implemented")
}
func (*UnimplementedAsddServer) SolutionStart(ctx context.Context, req *Solution) (*Solution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolutionStart not implemented")
}
func (*UnimplementedAsddServer) SolutionStop(ctx context.Context, req *Solution) (*Solution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolutionStop not implemented")
}
func (*UnimplementedAsddServer) SolutionExpose(ctx context.Context, req *Solution) (*Solution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolutionExpose not implemented")
}
func (*UnimplementedAsddServer) SolutionContain(ctx context.Context, req *Solution) (*Solution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolutionContain not implemented")
}
func (*UnimplementedAsddServer) SolutionSnapshot(ctx context.Context, req *Solution) (*Solution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolutionSnapshot not implemented")
}
func (*UnimplementedAsddServer) SolutionRollback(ctx context.Context, req *Solution) (*Solution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolutionRollback not implemented")
}

func RegisterAsddServer(s *grpc.Server, srv AsddServer) {
	s.RegisterService(&_Asdd_serviceDesc, srv)
}

func _Asdd_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsddServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asdd/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsddServer).Version(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asdd_MasterInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Master)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsddServer).MasterInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asdd/MasterInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsddServer).MasterInit(ctx, req.(*Master))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asdd_NodeAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsddServer).NodeAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asdd/NodeAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsddServer).NodeAdd(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asdd_NodeRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsddServer).NodeRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asdd/NodeRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsddServer).NodeRemove(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asdd_NodePurge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsddServer).NodePurge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asdd/NodePurge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsddServer).NodePurge(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asdd_SolutionCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsddServer).SolutionCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asdd/SolutionCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsddServer).SolutionCreate(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asdd_SolutionDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsddServer).SolutionDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asdd/SolutionDestroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsddServer).SolutionDestroy(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asdd_SolutionBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsddServer).SolutionBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asdd/SolutionBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsddServer).SolutionBackup(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asdd_SolutionRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsddServer).SolutionRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asdd/SolutionRestore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsddServer).SolutionRestore(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asdd_SolutionDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsddServer).SolutionDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asdd/SolutionDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsddServer).SolutionDeploy(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asdd_SolutionRetire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsddServer).SolutionRetire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asdd/SolutionRetire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsddServer).SolutionRetire(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asdd_SolutionStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsddServer).SolutionStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asdd/SolutionStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsddServer).SolutionStart(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asdd_SolutionStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsddServer).SolutionStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asdd/SolutionStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsddServer).SolutionStop(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asdd_SolutionExpose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsddServer).SolutionExpose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asdd/SolutionExpose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsddServer).SolutionExpose(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asdd_SolutionContain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsddServer).SolutionContain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asdd/SolutionContain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsddServer).SolutionContain(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asdd_SolutionSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsddServer).SolutionSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asdd/SolutionSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsddServer).SolutionSnapshot(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asdd_SolutionRollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsddServer).SolutionRollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asdd/SolutionRollback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsddServer).SolutionRollback(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

var _Asdd_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Asdd",
	HandlerType: (*AsddServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _Asdd_Version_Handler,
		},
		{
			MethodName: "MasterInit",
			Handler:    _Asdd_MasterInit_Handler,
		},
		{
			MethodName: "NodeAdd",
			Handler:    _Asdd_NodeAdd_Handler,
		},
		{
			MethodName: "NodeRemove",
			Handler:    _Asdd_NodeRemove_Handler,
		},
		{
			MethodName: "NodePurge",
			Handler:    _Asdd_NodePurge_Handler,
		},
		{
			MethodName: "SolutionCreate",
			Handler:    _Asdd_SolutionCreate_Handler,
		},
		{
			MethodName: "SolutionDestroy",
			Handler:    _Asdd_SolutionDestroy_Handler,
		},
		{
			MethodName: "SolutionBackup",
			Handler:    _Asdd_SolutionBackup_Handler,
		},
		{
			MethodName: "SolutionRestore",
			Handler:    _Asdd_SolutionRestore_Handler,
		},
		{
			MethodName: "SolutionDeploy",
			Handler:    _Asdd_SolutionDeploy_Handler,
		},
		{
			MethodName: "SolutionRetire",
			Handler:    _Asdd_SolutionRetire_Handler,
		},
		{
			MethodName: "SolutionStart",
			Handler:    _Asdd_SolutionStart_Handler,
		},
		{
			MethodName: "SolutionStop",
			Handler:    _Asdd_SolutionStop_Handler,
		},
		{
			MethodName: "SolutionExpose",
			Handler:    _Asdd_SolutionExpose_Handler,
		},
		{
			MethodName: "SolutionContain",
			Handler:    _Asdd_SolutionContain_Handler,
		},
		{
			MethodName: "SolutionSnapshot",
			Handler:    _Asdd_SolutionSnapshot_Handler,
		},
		{
			MethodName: "SolutionRollback",
			Handler:    _Asdd_SolutionRollback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// AsdLetClient is the client API for AsdLet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AsdLetClient interface {
	Version(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Outcome, error)
	NodeAdd(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error)
	NodeRemove(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error)
	NodePurge(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error)
	SolutionDeploy(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Solution, error)
	SolutionRetire(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Solution, error)
	SolutionStart(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Solution, error)
	SolutionStop(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Solution, error)
	SolutionExpose(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Solution, error)
	SolutionContain(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Solution, error)
}

type asdLetClient struct {
	cc *grpc.ClientConn
}

func NewAsdLetClient(cc *grpc.ClientConn) AsdLetClient {
	return &asdLetClient{cc}
}

func (c *asdLetClient) Version(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := c.cc.Invoke(ctx, "/api.AsdLet/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asdLetClient) NodeAdd(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/api.AsdLet/NodeAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asdLetClient) NodeRemove(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/api.AsdLet/NodeRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asdLetClient) NodePurge(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/api.AsdLet/NodePurge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asdLetClient) SolutionDeploy(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Solution, error) {
	out := new(Solution)
	err := c.cc.Invoke(ctx, "/api.AsdLet/SolutionDeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asdLetClient) SolutionRetire(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Solution, error) {
	out := new(Solution)
	err := c.cc.Invoke(ctx, "/api.AsdLet/SolutionRetire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asdLetClient) SolutionStart(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Solution, error) {
	out := new(Solution)
	err := c.cc.Invoke(ctx, "/api.AsdLet/SolutionStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asdLetClient) SolutionStop(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Solution, error) {
	out := new(Solution)
	err := c.cc.Invoke(ctx, "/api.AsdLet/SolutionStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asdLetClient) SolutionExpose(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Solution, error) {
	out := new(Solution)
	err := c.cc.Invoke(ctx, "/api.AsdLet/SolutionExpose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asdLetClient) SolutionContain(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Solution, error) {
	out := new(Solution)
	err := c.cc.Invoke(ctx, "/api.AsdLet/SolutionContain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AsdLetServer is the server API for AsdLet service.
type AsdLetServer interface {
	Version(context.Context, *Void) (*Outcome, error)
	NodeAdd(context.Context, *Node) (*Node, error)
	NodeRemove(context.Context, *Node) (*Node, error)
	NodePurge(context.Context, *Node) (*Node, error)
	SolutionDeploy(context.Context, *Solution) (*Solution, error)
	SolutionRetire(context.Context, *Solution) (*Solution, error)
	SolutionStart(context.Context, *Solution) (*Solution, error)
	SolutionStop(context.Context, *Solution) (*Solution, error)
	SolutionExpose(context.Context, *Solution) (*Solution, error)
	SolutionContain(context.Context, *Solution) (*Solution, error)
}

// UnimplementedAsdLetServer can be embedded to have forward compatible implementations.
type UnimplementedAsdLetServer struct {
}

func (*UnimplementedAsdLetServer) Version(ctx context.Context, req *Void) (*Outcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (*UnimplementedAsdLetServer) NodeAdd(ctx context.Context, req *Node) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeAdd not implemented")
}
func (*UnimplementedAsdLetServer) NodeRemove(ctx context.Context, req *Node) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeRemove not implemented")
}
func (*UnimplementedAsdLetServer) NodePurge(ctx context.Context, req *Node) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodePurge not implemented")
}
func (*UnimplementedAsdLetServer) SolutionDeploy(ctx context.Context, req *Solution) (*Solution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolutionDeploy not implemented")
}
func (*UnimplementedAsdLetServer) SolutionRetire(ctx context.Context, req *Solution) (*Solution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolutionRetire not implemented")
}
func (*UnimplementedAsdLetServer) SolutionStart(ctx context.Context, req *Solution) (*Solution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolutionStart not implemented")
}
func (*UnimplementedAsdLetServer) SolutionStop(ctx context.Context, req *Solution) (*Solution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolutionStop not implemented")
}
func (*UnimplementedAsdLetServer) SolutionExpose(ctx context.Context, req *Solution) (*Solution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolutionExpose not implemented")
}
func (*UnimplementedAsdLetServer) SolutionContain(ctx context.Context, req *Solution) (*Solution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolutionContain not implemented")
}

func RegisterAsdLetServer(s *grpc.Server, srv AsdLetServer) {
	s.RegisterService(&_AsdLet_serviceDesc, srv)
}

func _AsdLet_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdLetServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AsdLet/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdLetServer).Version(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsdLet_NodeAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdLetServer).NodeAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AsdLet/NodeAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdLetServer).NodeAdd(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsdLet_NodeRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdLetServer).NodeRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AsdLet/NodeRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdLetServer).NodeRemove(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsdLet_NodePurge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdLetServer).NodePurge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AsdLet/NodePurge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdLetServer).NodePurge(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsdLet_SolutionDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdLetServer).SolutionDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AsdLet/SolutionDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdLetServer).SolutionDeploy(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsdLet_SolutionRetire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdLetServer).SolutionRetire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AsdLet/SolutionRetire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdLetServer).SolutionRetire(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsdLet_SolutionStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdLetServer).SolutionStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AsdLet/SolutionStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdLetServer).SolutionStart(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsdLet_SolutionStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdLetServer).SolutionStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AsdLet/SolutionStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdLetServer).SolutionStop(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsdLet_SolutionExpose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdLetServer).SolutionExpose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AsdLet/SolutionExpose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdLetServer).SolutionExpose(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsdLet_SolutionContain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdLetServer).SolutionContain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AsdLet/SolutionContain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdLetServer).SolutionContain(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

var _AsdLet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.AsdLet",
	HandlerType: (*AsdLetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _AsdLet_Version_Handler,
		},
		{
			MethodName: "NodeAdd",
			Handler:    _AsdLet_NodeAdd_Handler,
		},
		{
			MethodName: "NodeRemove",
			Handler:    _AsdLet_NodeRemove_Handler,
		},
		{
			MethodName: "NodePurge",
			Handler:    _AsdLet_NodePurge_Handler,
		},
		{
			MethodName: "SolutionDeploy",
			Handler:    _AsdLet_SolutionDeploy_Handler,
		},
		{
			MethodName: "SolutionRetire",
			Handler:    _AsdLet_SolutionRetire_Handler,
		},
		{
			MethodName: "SolutionStart",
			Handler:    _AsdLet_SolutionStart_Handler,
		},
		{
			MethodName: "SolutionStop",
			Handler:    _AsdLet_SolutionStop_Handler,
		},
		{
			MethodName: "SolutionExpose",
			Handler:    _AsdLet_SolutionExpose_Handler,
		},
		{
			MethodName: "SolutionContain",
			Handler:    _AsdLet_SolutionContain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
