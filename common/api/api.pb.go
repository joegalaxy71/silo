// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UnitInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnitInfo) Reset()         { *m = UnitInfo{} }
func (m *UnitInfo) String() string { return proto.CompactTextString(m) }
func (*UnitInfo) ProtoMessage()    {}
func (*UnitInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *UnitInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnitInfo.Unmarshal(m, b)
}
func (m *UnitInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnitInfo.Marshal(b, m, deterministic)
}
func (m *UnitInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnitInfo.Merge(m, src)
}
func (m *UnitInfo) XXX_Size() int {
	return xxx_messageInfo_UnitInfo.Size(m)
}
func (m *UnitInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UnitInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UnitInfo proto.InternalMessageInfo

func (m *UnitInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Info struct {
	Name                 string      `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Units                []*UnitInfo `protobuf:"bytes,2,rep,name=Units,proto3" json:"Units,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Info) Reset()         { *m = Info{} }
func (m *Info) String() string { return proto.CompactTextString(m) }
func (*Info) ProtoMessage()    {}
func (*Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *Info) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Info.Unmarshal(m, b)
}
func (m *Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Info.Marshal(b, m, deterministic)
}
func (m *Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Info.Merge(m, src)
}
func (m *Info) XXX_Size() int {
	return xxx_messageInfo_Info.Size(m)
}
func (m *Info) XXX_DiscardUnknown() {
	xxx_messageInfo_Info.DiscardUnknown(m)
}

var xxx_messageInfo_Info proto.InternalMessageInfo

func (m *Info) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Info) GetUnits() []*UnitInfo {
	if m != nil {
		return m.Units
	}
	return nil
}

type Solution struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Solution) Reset()         { *m = Solution{} }
func (m *Solution) String() string { return proto.CompactTextString(m) }
func (*Solution) ProtoMessage()    {}
func (*Solution) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

func (m *Solution) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Solution.Unmarshal(m, b)
}
func (m *Solution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Solution.Marshal(b, m, deterministic)
}
func (m *Solution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Solution.Merge(m, src)
}
func (m *Solution) XXX_Size() int {
	return xxx_messageInfo_Solution.Size(m)
}
func (m *Solution) XXX_DiscardUnknown() {
	xxx_messageInfo_Solution.DiscardUnknown(m)
}

var xxx_messageInfo_Solution proto.InternalMessageInfo

type Outcome struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Outcome) Reset()         { *m = Outcome{} }
func (m *Outcome) String() string { return proto.CompactTextString(m) }
func (*Outcome) ProtoMessage()    {}
func (*Outcome) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

func (m *Outcome) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Outcome.Unmarshal(m, b)
}
func (m *Outcome) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Outcome.Marshal(b, m, deterministic)
}
func (m *Outcome) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Outcome.Merge(m, src)
}
func (m *Outcome) XXX_Size() int {
	return xxx_messageInfo_Outcome.Size(m)
}
func (m *Outcome) XXX_DiscardUnknown() {
	xxx_messageInfo_Outcome.DiscardUnknown(m)
}

var xxx_messageInfo_Outcome proto.InternalMessageInfo

func init() {
	proto.RegisterType((*UnitInfo)(nil), "api.UnitInfo")
	proto.RegisterType((*Info)(nil), "api.Info")
	proto.RegisterType((*Solution)(nil), "api.Solution")
	proto.RegisterType((*Outcome)(nil), "api.Outcome")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0xc6, 0x29, 0x49, 0xdb, 0xe4, 0x80, 0xc5, 0x53, 0xc5, 0x80, 0x2a, 0xa3, 0x42, 0x58, 0x3a,
	0x94, 0x07, 0x40, 0xd0, 0x32, 0xb0, 0x80, 0x94, 0x88, 0x07, 0xb8, 0x06, 0x23, 0xac, 0xa6, 0x3e,
	0xcb, 0xbe, 0x48, 0xf0, 0x30, 0xbc, 0x2b, 0x4a, 0x4a, 0xc6, 0xca, 0xde, 0x6c, 0x7d, 0xbf, 0xef,
	0xe7, 0x3f, 0x3a, 0xc8, 0xd1, 0xea, 0xa5, 0x75, 0xc4, 0x24, 0x12, 0xb4, 0x5a, 0x5e, 0x41, 0xf6,
	0x6e, 0x34, 0xbf, 0x98, 0x4f, 0x12, 0x02, 0xd2, 0x57, 0xdc, 0xab, 0xd9, 0x68, 0x3e, 0x2a, 0xf2,
	0xb2, 0x5f, 0xcb, 0x07, 0x48, 0x8f, 0x65, 0xe2, 0x1a, 0xc6, 0x5d, 0xd7, 0xcf, 0x4e, 0xe7, 0x49,
	0x71, 0xb6, 0xba, 0x58, 0x76, 0xee, 0xc1, 0x56, 0x1e, 0x32, 0x09, 0x90, 0x55, 0xd4, 0xb4, 0xac,
	0xc9, 0xc8, 0x1c, 0xa6, 0x6f, 0x2d, 0xd7, 0xb4, 0x57, 0xab, 0xdf, 0x14, 0x92, 0x47, 0xff, 0x21,
	0x16, 0x9d, 0x5f, 0xb3, 0x38, 0x94, 0x07, 0xf2, 0xf2, 0xbc, 0xdf, 0xfe, 0xc3, 0xf2, 0x44, 0xdc,
	0xc2, 0x64, 0xed, 0x14, 0xb2, 0x0a, 0x81, 0x05, 0x4c, 0x37, 0xca, 0xb3, 0xa3, 0x9f, 0x08, 0xe5,
	0x13, 0xd6, 0xbb, 0xd6, 0x46, 0x28, 0x4b, 0xe5, 0x99, 0x9c, 0x8a, 0x50, 0x6e, 0x94, 0x6d, 0xc2,
	0x67, 0xf7, 0x4a, 0xee, 0x1e, 0x14, 0x22, 0x6f, 0x60, 0x5c, 0x31, 0xba, 0x20, 0xb7, 0x80, 0xb4,
	0x62, 0xb2, 0x11, 0x37, 0x7c, 0xfe, 0xb6, 0xe4, 0x63, 0xfe, 0x71, 0x4d, 0x86, 0x51, 0x9b, 0x10,
	0x79, 0x07, 0x59, 0x65, 0xd0, 0xfa, 0x2f, 0xe2, 0x08, 0xb4, 0xa4, 0xa6, 0xd9, 0x62, 0xbd, 0x0b,
	0xa0, 0xdb, 0x49, 0x3f, 0xa3, 0xf7, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6a, 0x6e, 0x4e, 0x75,
	0xb0, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AsdClient is the client API for Asd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AsdClient interface {
	Init(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error)
	Create(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error)
	Destroy(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error)
	Backup(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error)
	Restore(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error)
	Deploy(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error)
	Retreat(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error)
	Start(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error)
	Stop(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error)
	Expose(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error)
	Contain(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error)
	Snapshot(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error)
	Rollback(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error)
}

type asdClient struct {
	cc *grpc.ClientConn
}

func NewAsdClient(cc *grpc.ClientConn) AsdClient {
	return &asdClient{cc}
}

func (c *asdClient) Init(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := c.cc.Invoke(ctx, "/api.Asd/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asdClient) Create(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := c.cc.Invoke(ctx, "/api.Asd/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asdClient) Destroy(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := c.cc.Invoke(ctx, "/api.Asd/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asdClient) Backup(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := c.cc.Invoke(ctx, "/api.Asd/Backup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asdClient) Restore(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := c.cc.Invoke(ctx, "/api.Asd/Restore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asdClient) Deploy(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := c.cc.Invoke(ctx, "/api.Asd/Deploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asdClient) Retreat(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := c.cc.Invoke(ctx, "/api.Asd/Retreat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asdClient) Start(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := c.cc.Invoke(ctx, "/api.Asd/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asdClient) Stop(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := c.cc.Invoke(ctx, "/api.Asd/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asdClient) Expose(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := c.cc.Invoke(ctx, "/api.Asd/Expose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asdClient) Contain(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := c.cc.Invoke(ctx, "/api.Asd/Contain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asdClient) Snapshot(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := c.cc.Invoke(ctx, "/api.Asd/Snapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asdClient) Rollback(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := c.cc.Invoke(ctx, "/api.Asd/Rollback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AsdServer is the server API for Asd service.
type AsdServer interface {
	Init(context.Context, *Solution) (*Outcome, error)
	Create(context.Context, *Solution) (*Outcome, error)
	Destroy(context.Context, *Solution) (*Outcome, error)
	Backup(context.Context, *Solution) (*Outcome, error)
	Restore(context.Context, *Solution) (*Outcome, error)
	Deploy(context.Context, *Solution) (*Outcome, error)
	Retreat(context.Context, *Solution) (*Outcome, error)
	Start(context.Context, *Solution) (*Outcome, error)
	Stop(context.Context, *Solution) (*Outcome, error)
	Expose(context.Context, *Solution) (*Outcome, error)
	Contain(context.Context, *Solution) (*Outcome, error)
	Snapshot(context.Context, *Solution) (*Outcome, error)
	Rollback(context.Context, *Solution) (*Outcome, error)
}

// UnimplementedAsdServer can be embedded to have forward compatible implementations.
type UnimplementedAsdServer struct {
}

func (*UnimplementedAsdServer) Init(ctx context.Context, req *Solution) (*Outcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (*UnimplementedAsdServer) Create(ctx context.Context, req *Solution) (*Outcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedAsdServer) Destroy(ctx context.Context, req *Solution) (*Outcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (*UnimplementedAsdServer) Backup(ctx context.Context, req *Solution) (*Outcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Backup not implemented")
}
func (*UnimplementedAsdServer) Restore(ctx context.Context, req *Solution) (*Outcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (*UnimplementedAsdServer) Deploy(ctx context.Context, req *Solution) (*Outcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deploy not implemented")
}
func (*UnimplementedAsdServer) Retreat(ctx context.Context, req *Solution) (*Outcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retreat not implemented")
}
func (*UnimplementedAsdServer) Start(ctx context.Context, req *Solution) (*Outcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedAsdServer) Stop(ctx context.Context, req *Solution) (*Outcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (*UnimplementedAsdServer) Expose(ctx context.Context, req *Solution) (*Outcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Expose not implemented")
}
func (*UnimplementedAsdServer) Contain(ctx context.Context, req *Solution) (*Outcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Contain not implemented")
}
func (*UnimplementedAsdServer) Snapshot(ctx context.Context, req *Solution) (*Outcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Snapshot not implemented")
}
func (*UnimplementedAsdServer) Rollback(ctx context.Context, req *Solution) (*Outcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rollback not implemented")
}

func RegisterAsdServer(s *grpc.Server, srv AsdServer) {
	s.RegisterService(&_Asd_serviceDesc, srv)
}

func _Asd_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asd/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdServer).Init(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asd_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asd/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdServer).Create(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asd_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asd/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdServer).Destroy(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asd_Backup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdServer).Backup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asd/Backup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdServer).Backup(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asd_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asd/Restore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdServer).Restore(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asd_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdServer).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asd/Deploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdServer).Deploy(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asd_Retreat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdServer).Retreat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asd/Retreat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdServer).Retreat(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asd_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asd/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdServer).Start(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asd_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asd/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdServer).Stop(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asd_Expose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdServer).Expose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asd/Expose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdServer).Expose(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asd_Contain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdServer).Contain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asd/Contain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdServer).Contain(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asd_Snapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdServer).Snapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asd/Snapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdServer).Snapshot(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asd_Rollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdServer).Rollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asd/Rollback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdServer).Rollback(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

var _Asd_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Asd",
	HandlerType: (*AsdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _Asd_Init_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Asd_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _Asd_Destroy_Handler,
		},
		{
			MethodName: "Backup",
			Handler:    _Asd_Backup_Handler,
		},
		{
			MethodName: "Restore",
			Handler:    _Asd_Restore_Handler,
		},
		{
			MethodName: "Deploy",
			Handler:    _Asd_Deploy_Handler,
		},
		{
			MethodName: "Retreat",
			Handler:    _Asd_Retreat_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _Asd_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Asd_Stop_Handler,
		},
		{
			MethodName: "Expose",
			Handler:    _Asd_Expose_Handler,
		},
		{
			MethodName: "Contain",
			Handler:    _Asd_Contain_Handler,
		},
		{
			MethodName: "Snapshot",
			Handler:    _Asd_Snapshot_Handler,
		},
		{
			MethodName: "Rollback",
			Handler:    _Asd_Rollback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
