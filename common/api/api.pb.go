// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UnitInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnitInfo) Reset()         { *m = UnitInfo{} }
func (m *UnitInfo) String() string { return proto.CompactTextString(m) }
func (*UnitInfo) ProtoMessage()    {}
func (*UnitInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *UnitInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnitInfo.Unmarshal(m, b)
}
func (m *UnitInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnitInfo.Marshal(b, m, deterministic)
}
func (m *UnitInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnitInfo.Merge(m, src)
}
func (m *UnitInfo) XXX_Size() int {
	return xxx_messageInfo_UnitInfo.Size(m)
}
func (m *UnitInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UnitInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UnitInfo proto.InternalMessageInfo

func (m *UnitInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type SolutionInfo struct {
	Name                 string      `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Units                []*UnitInfo `protobuf:"bytes,2,rep,name=Units,proto3" json:"Units,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SolutionInfo) Reset()         { *m = SolutionInfo{} }
func (m *SolutionInfo) String() string { return proto.CompactTextString(m) }
func (*SolutionInfo) ProtoMessage()    {}
func (*SolutionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *SolutionInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SolutionInfo.Unmarshal(m, b)
}
func (m *SolutionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SolutionInfo.Marshal(b, m, deterministic)
}
func (m *SolutionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SolutionInfo.Merge(m, src)
}
func (m *SolutionInfo) XXX_Size() int {
	return xxx_messageInfo_SolutionInfo.Size(m)
}
func (m *SolutionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SolutionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SolutionInfo proto.InternalMessageInfo

func (m *SolutionInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SolutionInfo) GetUnits() []*UnitInfo {
	if m != nil {
		return m.Units
	}
	return nil
}

type Request struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

type Outcome struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Outcome) Reset()         { *m = Outcome{} }
func (m *Outcome) String() string { return proto.CompactTextString(m) }
func (*Outcome) ProtoMessage()    {}
func (*Outcome) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

func (m *Outcome) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Outcome.Unmarshal(m, b)
}
func (m *Outcome) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Outcome.Marshal(b, m, deterministic)
}
func (m *Outcome) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Outcome.Merge(m, src)
}
func (m *Outcome) XXX_Size() int {
	return xxx_messageInfo_Outcome.Size(m)
}
func (m *Outcome) XXX_DiscardUnknown() {
	xxx_messageInfo_Outcome.DiscardUnknown(m)
}

var xxx_messageInfo_Outcome proto.InternalMessageInfo

func init() {
	proto.RegisterType((*UnitInfo)(nil), "api.UnitInfo")
	proto.RegisterType((*SolutionInfo)(nil), "api.SolutionInfo")
	proto.RegisterType((*Request)(nil), "api.Request")
	proto.RegisterType((*Outcome)(nil), "api.Outcome")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x41, 0x4f, 0xc2, 0x40,
	0x10, 0x85, 0x45, 0x10, 0xec, 0x58, 0xd0, 0xec, 0x89, 0x78, 0x30, 0xa4, 0x1e, 0xe4, 0xa0, 0xd5,
	0xe0, 0x2f, 0x50, 0x30, 0x86, 0x8b, 0x26, 0x6d, 0xfc, 0x01, 0x4b, 0x1d, 0xe3, 0x86, 0xb2, 0xb3,
	0xee, 0x4e, 0x8d, 0xfe, 0x71, 0xcf, 0xa6, 0x05, 0x8e, 0xc6, 0xe1, 0x36, 0x9b, 0x7d, 0xdf, 0x7b,
	0x6f, 0x37, 0x19, 0x88, 0xb4, 0x33, 0xa9, 0xf3, 0xc4, 0xa4, 0xda, 0xda, 0x99, 0xe4, 0x0c, 0x0e,
	0x5f, 0xac, 0xe1, 0xb9, 0x7d, 0x23, 0xa5, 0xa0, 0xf3, 0xa4, 0x57, 0x38, 0x6c, 0x8d, 0x5a, 0xe3,
	0x28, 0x6b, 0xe6, 0xe4, 0x11, 0xe2, 0x9c, 0xca, 0x8a, 0x0d, 0xd9, 0xbf, 0x34, 0xea, 0x1c, 0x0e,
	0x6a, 0x8f, 0x30, 0xdc, 0x1f, 0xb5, 0xc7, 0x47, 0x93, 0x7e, 0x5a, 0x67, 0x6c, 0x5d, 0xb3, 0xf5,
	0x5d, 0x12, 0x41, 0x2f, 0xc3, 0x8f, 0x0a, 0x03, 0xd7, 0xe3, 0x73, 0xc5, 0x05, 0xad, 0x70, 0xf2,
	0xd3, 0x81, 0x6e, 0x8e, 0xfe, 0x13, 0xbd, 0xba, 0x80, 0xde, 0xdc, 0x1a, 0xbe, 0x0b, 0xaf, 0x2a,
	0x6e, 0x1c, 0x36, 0xf2, 0xd3, 0xf5, 0x69, 0x43, 0x24, 0x7b, 0x2a, 0x85, 0xc1, 0xd4, 0xa3, 0x66,
	0xdc, 0x16, 0xfb, 0x47, 0x7f, 0x0d, 0xc7, 0x33, 0x0c, 0xec, 0xe9, 0x5b, 0x08, 0xa4, 0x30, 0xb8,
	0xd7, 0xc5, 0xb2, 0x72, 0xf2, 0x80, 0x0c, 0x03, 0x93, 0x47, 0x79, 0xc0, 0x0c, 0x5d, 0x29, 0x2e,
	0xd4, 0x04, 0x70, 0xfd, 0x66, 0x21, 0x70, 0x05, 0xfd, 0x9c, 0xb5, 0x97, 0xca, 0x2f, 0x21, 0xce,
	0x99, 0x9c, 0xbc, 0xfd, 0xc3, 0x97, 0xa3, 0xb0, 0xc3, 0xff, 0x4f, 0xc9, 0xb2, 0x36, 0x56, 0x08,
	0xdc, 0xc0, 0x49, 0x6e, 0xb5, 0x0b, 0xef, 0xc4, 0x72, 0x22, 0xa3, 0xb2, 0x5c, 0xe8, 0x62, 0x29,
	0x23, 0x16, 0xdd, 0x66, 0x07, 0x6e, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xdf, 0x4b, 0x38, 0xae,
	0x10, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServerClient is the client API for Server service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServerClient interface {
	InitAsd(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Outcome, error)
	CreateSolution(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Outcome, error)
	DestroySolution(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Outcome, error)
	BackupSolution(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Outcome, error)
	RestoreSolution(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Outcome, error)
	DeploySolution(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Outcome, error)
	RetreatSolution(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Outcome, error)
	StartSolution(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Outcome, error)
	StopSolution(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Outcome, error)
	ExposeSolution(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Outcome, error)
	ContainSolution(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Outcome, error)
	SnapshotSolution(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Outcome, error)
	RollbackSolution(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Outcome, error)
}

type serverClient struct {
	cc *grpc.ClientConn
}

func NewServerClient(cc *grpc.ClientConn) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) InitAsd(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := c.cc.Invoke(ctx, "/api.Server/InitAsd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) CreateSolution(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := c.cc.Invoke(ctx, "/api.Server/CreateSolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) DestroySolution(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := c.cc.Invoke(ctx, "/api.Server/DestroySolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) BackupSolution(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := c.cc.Invoke(ctx, "/api.Server/BackupSolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) RestoreSolution(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := c.cc.Invoke(ctx, "/api.Server/RestoreSolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) DeploySolution(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := c.cc.Invoke(ctx, "/api.Server/DeploySolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) RetreatSolution(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := c.cc.Invoke(ctx, "/api.Server/RetreatSolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) StartSolution(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := c.cc.Invoke(ctx, "/api.Server/StartSolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) StopSolution(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := c.cc.Invoke(ctx, "/api.Server/StopSolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) ExposeSolution(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := c.cc.Invoke(ctx, "/api.Server/ExposeSolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) ContainSolution(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := c.cc.Invoke(ctx, "/api.Server/ContainSolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) SnapshotSolution(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := c.cc.Invoke(ctx, "/api.Server/SnapshotSolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) RollbackSolution(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := c.cc.Invoke(ctx, "/api.Server/RollbackSolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerServer is the server API for Server service.
type ServerServer interface {
	InitAsd(context.Context, *Request) (*Outcome, error)
	CreateSolution(context.Context, *Request) (*Outcome, error)
	DestroySolution(context.Context, *Request) (*Outcome, error)
	BackupSolution(context.Context, *Request) (*Outcome, error)
	RestoreSolution(context.Context, *Request) (*Outcome, error)
	DeploySolution(context.Context, *Request) (*Outcome, error)
	RetreatSolution(context.Context, *Request) (*Outcome, error)
	StartSolution(context.Context, *Request) (*Outcome, error)
	StopSolution(context.Context, *Request) (*Outcome, error)
	ExposeSolution(context.Context, *Request) (*Outcome, error)
	ContainSolution(context.Context, *Request) (*Outcome, error)
	SnapshotSolution(context.Context, *Request) (*Outcome, error)
	RollbackSolution(context.Context, *Request) (*Outcome, error)
}

// UnimplementedServerServer can be embedded to have forward compatible implementations.
type UnimplementedServerServer struct {
}

func (*UnimplementedServerServer) InitAsd(ctx context.Context, req *Request) (*Outcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitAsd not implemented")
}
func (*UnimplementedServerServer) CreateSolution(ctx context.Context, req *Request) (*Outcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSolution not implemented")
}
func (*UnimplementedServerServer) DestroySolution(ctx context.Context, req *Request) (*Outcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroySolution not implemented")
}
func (*UnimplementedServerServer) BackupSolution(ctx context.Context, req *Request) (*Outcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupSolution not implemented")
}
func (*UnimplementedServerServer) RestoreSolution(ctx context.Context, req *Request) (*Outcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreSolution not implemented")
}
func (*UnimplementedServerServer) DeploySolution(ctx context.Context, req *Request) (*Outcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeploySolution not implemented")
}
func (*UnimplementedServerServer) RetreatSolution(ctx context.Context, req *Request) (*Outcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetreatSolution not implemented")
}
func (*UnimplementedServerServer) StartSolution(ctx context.Context, req *Request) (*Outcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSolution not implemented")
}
func (*UnimplementedServerServer) StopSolution(ctx context.Context, req *Request) (*Outcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSolution not implemented")
}
func (*UnimplementedServerServer) ExposeSolution(ctx context.Context, req *Request) (*Outcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExposeSolution not implemented")
}
func (*UnimplementedServerServer) ContainSolution(ctx context.Context, req *Request) (*Outcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainSolution not implemented")
}
func (*UnimplementedServerServer) SnapshotSolution(ctx context.Context, req *Request) (*Outcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotSolution not implemented")
}
func (*UnimplementedServerServer) RollbackSolution(ctx context.Context, req *Request) (*Outcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackSolution not implemented")
}

func RegisterServerServer(s *grpc.Server, srv ServerServer) {
	s.RegisterService(&_Server_serviceDesc, srv)
}

func _Server_InitAsd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).InitAsd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Server/InitAsd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).InitAsd(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_CreateSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).CreateSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Server/CreateSolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).CreateSolution(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_DestroySolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).DestroySolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Server/DestroySolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).DestroySolution(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_BackupSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).BackupSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Server/BackupSolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).BackupSolution(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_RestoreSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).RestoreSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Server/RestoreSolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).RestoreSolution(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_DeploySolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).DeploySolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Server/DeploySolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).DeploySolution(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_RetreatSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).RetreatSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Server/RetreatSolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).RetreatSolution(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_StartSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).StartSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Server/StartSolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).StartSolution(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_StopSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).StopSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Server/StopSolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).StopSolution(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_ExposeSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).ExposeSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Server/ExposeSolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).ExposeSolution(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_ContainSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).ContainSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Server/ContainSolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).ContainSolution(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_SnapshotSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).SnapshotSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Server/SnapshotSolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).SnapshotSolution(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_RollbackSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).RollbackSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Server/RollbackSolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).RollbackSolution(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Server_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Server",
	HandlerType: (*ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitAsd",
			Handler:    _Server_InitAsd_Handler,
		},
		{
			MethodName: "CreateSolution",
			Handler:    _Server_CreateSolution_Handler,
		},
		{
			MethodName: "DestroySolution",
			Handler:    _Server_DestroySolution_Handler,
		},
		{
			MethodName: "BackupSolution",
			Handler:    _Server_BackupSolution_Handler,
		},
		{
			MethodName: "RestoreSolution",
			Handler:    _Server_RestoreSolution_Handler,
		},
		{
			MethodName: "DeploySolution",
			Handler:    _Server_DeploySolution_Handler,
		},
		{
			MethodName: "RetreatSolution",
			Handler:    _Server_RetreatSolution_Handler,
		},
		{
			MethodName: "StartSolution",
			Handler:    _Server_StartSolution_Handler,
		},
		{
			MethodName: "StopSolution",
			Handler:    _Server_StopSolution_Handler,
		},
		{
			MethodName: "ExposeSolution",
			Handler:    _Server_ExposeSolution_Handler,
		},
		{
			MethodName: "ContainSolution",
			Handler:    _Server_ContainSolution_Handler,
		},
		{
			MethodName: "SnapshotSolution",
			Handler:    _Server_SnapshotSolution_Handler,
		},
		{
			MethodName: "RollbackSolution",
			Handler:    _Server_RollbackSolution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
