// Code generated by protoc-gen-go.
// source: api.proto
// DO NOT EDIT!

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	UnitInfo
	Info
	Solution
	Pool
	Void
	Outcome
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UnitInfo struct {
	Name string `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
}

func (m *UnitInfo) Reset()                    { *m = UnitInfo{} }
func (m *UnitInfo) String() string            { return proto.CompactTextString(m) }
func (*UnitInfo) ProtoMessage()               {}
func (*UnitInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UnitInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Info struct {
	Name  string      `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
	Units []*UnitInfo `protobuf:"bytes,2,rep,name=Units,json=units" json:"Units,omitempty"`
}

func (m *Info) Reset()                    { *m = Info{} }
func (m *Info) String() string            { return proto.CompactTextString(m) }
func (*Info) ProtoMessage()               {}
func (*Info) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Info) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Info) GetUnits() []*UnitInfo {
	if m != nil {
		return m.Units
	}
	return nil
}

type Solution struct {
	Name string `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
}

func (m *Solution) Reset()                    { *m = Solution{} }
func (m *Solution) String() string            { return proto.CompactTextString(m) }
func (*Solution) ProtoMessage()               {}
func (*Solution) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Solution) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Pool struct {
	Name string `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
}

func (m *Pool) Reset()                    { *m = Pool{} }
func (m *Pool) String() string            { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()               {}
func (*Pool) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Pool) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Void struct {
}

func (m *Void) Reset()                    { *m = Void{} }
func (m *Void) String() string            { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()               {}
func (*Void) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type Outcome struct {
	Error   bool   `protobuf:"varint,1,opt,name=error" json:"error,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Outcome) Reset()                    { *m = Outcome{} }
func (m *Outcome) String() string            { return proto.CompactTextString(m) }
func (*Outcome) ProtoMessage()               {}
func (*Outcome) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Outcome) GetError() bool {
	if m != nil {
		return m.Error
	}
	return false
}

func (m *Outcome) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*UnitInfo)(nil), "api.UnitInfo")
	proto.RegisterType((*Info)(nil), "api.Info")
	proto.RegisterType((*Solution)(nil), "api.Solution")
	proto.RegisterType((*Pool)(nil), "api.Pool")
	proto.RegisterType((*Void)(nil), "api.Void")
	proto.RegisterType((*Outcome)(nil), "api.Outcome")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Asd service

type AsdClient interface {
	Version(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Outcome, error)
	Init(ctx context.Context, in *Pool, opts ...grpc.CallOption) (*Outcome, error)
	Create(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error)
	Destroy(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error)
	Backup(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error)
	Restore(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error)
	Deploy(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error)
	Retreat(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error)
	Start(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error)
	Stop(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error)
	Expose(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error)
	Contain(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error)
	Snapshot(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error)
	Rollback(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error)
}

type asdClient struct {
	cc *grpc.ClientConn
}

func NewAsdClient(cc *grpc.ClientConn) AsdClient {
	return &asdClient{cc}
}

func (c *asdClient) Version(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := grpc.Invoke(ctx, "/api.Asd/Version", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asdClient) Init(ctx context.Context, in *Pool, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := grpc.Invoke(ctx, "/api.Asd/Init", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asdClient) Create(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := grpc.Invoke(ctx, "/api.Asd/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asdClient) Destroy(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := grpc.Invoke(ctx, "/api.Asd/Destroy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asdClient) Backup(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := grpc.Invoke(ctx, "/api.Asd/Backup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asdClient) Restore(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := grpc.Invoke(ctx, "/api.Asd/Restore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asdClient) Deploy(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := grpc.Invoke(ctx, "/api.Asd/Deploy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asdClient) Retreat(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := grpc.Invoke(ctx, "/api.Asd/Retreat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asdClient) Start(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := grpc.Invoke(ctx, "/api.Asd/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asdClient) Stop(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := grpc.Invoke(ctx, "/api.Asd/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asdClient) Expose(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := grpc.Invoke(ctx, "/api.Asd/Expose", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asdClient) Contain(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := grpc.Invoke(ctx, "/api.Asd/Contain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asdClient) Snapshot(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := grpc.Invoke(ctx, "/api.Asd/Snapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asdClient) Rollback(ctx context.Context, in *Solution, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := grpc.Invoke(ctx, "/api.Asd/Rollback", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Asd service

type AsdServer interface {
	Version(context.Context, *Void) (*Outcome, error)
	Init(context.Context, *Pool) (*Outcome, error)
	Create(context.Context, *Solution) (*Outcome, error)
	Destroy(context.Context, *Solution) (*Outcome, error)
	Backup(context.Context, *Solution) (*Outcome, error)
	Restore(context.Context, *Solution) (*Outcome, error)
	Deploy(context.Context, *Solution) (*Outcome, error)
	Retreat(context.Context, *Solution) (*Outcome, error)
	Start(context.Context, *Solution) (*Outcome, error)
	Stop(context.Context, *Solution) (*Outcome, error)
	Expose(context.Context, *Solution) (*Outcome, error)
	Contain(context.Context, *Solution) (*Outcome, error)
	Snapshot(context.Context, *Solution) (*Outcome, error)
	Rollback(context.Context, *Solution) (*Outcome, error)
}

func RegisterAsdServer(s *grpc.Server, srv AsdServer) {
	s.RegisterService(&_Asd_serviceDesc, srv)
}

func _Asd_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asd/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdServer).Version(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asd_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asd/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdServer).Init(ctx, req.(*Pool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asd_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asd/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdServer).Create(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asd_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asd/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdServer).Destroy(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asd_Backup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdServer).Backup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asd/Backup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdServer).Backup(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asd_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asd/Restore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdServer).Restore(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asd_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdServer).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asd/Deploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdServer).Deploy(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asd_Retreat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdServer).Retreat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asd/Retreat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdServer).Retreat(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asd_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asd/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdServer).Start(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asd_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asd/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdServer).Stop(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asd_Expose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdServer).Expose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asd/Expose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdServer).Expose(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asd_Contain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdServer).Contain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asd/Contain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdServer).Contain(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asd_Snapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdServer).Snapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asd/Snapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdServer).Snapshot(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asd_Rollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsdServer).Rollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Asd/Rollback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsdServer).Rollback(ctx, req.(*Solution))
	}
	return interceptor(ctx, in, info, handler)
}

var _Asd_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Asd",
	HandlerType: (*AsdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _Asd_Version_Handler,
		},
		{
			MethodName: "Init",
			Handler:    _Asd_Init_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Asd_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _Asd_Destroy_Handler,
		},
		{
			MethodName: "Backup",
			Handler:    _Asd_Backup_Handler,
		},
		{
			MethodName: "Restore",
			Handler:    _Asd_Restore_Handler,
		},
		{
			MethodName: "Deploy",
			Handler:    _Asd_Deploy_Handler,
		},
		{
			MethodName: "Retreat",
			Handler:    _Asd_Retreat_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _Asd_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Asd_Stop_Handler,
		},
		{
			MethodName: "Expose",
			Handler:    _Asd_Expose_Handler,
		},
		{
			MethodName: "Contain",
			Handler:    _Asd_Contain_Handler,
		},
		{
			MethodName: "Snapshot",
			Handler:    _Asd_Snapshot_Handler,
		},
		{
			MethodName: "Rollback",
			Handler:    _Asd_Rollback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x93, 0x3f, 0x4f, 0xf3, 0x30,
	0x10, 0xc6, 0xdf, 0xb6, 0x4e, 0xd2, 0xde, 0x0b, 0x8b, 0xc5, 0x10, 0x75, 0x40, 0x25, 0xfc, 0x69,
	0x59, 0x3a, 0x94, 0x89, 0x09, 0x41, 0xcb, 0xc0, 0x02, 0x28, 0x11, 0xdd, 0xdd, 0xd6, 0x80, 0xd5,
	0xc4, 0x67, 0xd9, 0x17, 0x09, 0x3e, 0x1d, 0x5f, 0x0d, 0x39, 0x6d, 0xa7, 0x16, 0x25, 0x5b, 0xac,
	0xfb, 0xf9, 0x77, 0xcf, 0x13, 0xc9, 0xd0, 0x13, 0x46, 0x8d, 0x8d, 0x45, 0x42, 0xde, 0x11, 0x46,
	0x25, 0xa7, 0xd0, 0x7d, 0xd3, 0x8a, 0x9e, 0xf4, 0x3b, 0x72, 0x0e, 0xec, 0x59, 0x14, 0x32, 0x6e,
	0x0d, 0x5a, 0xa3, 0x5e, 0xca, 0xb4, 0x28, 0x64, 0x72, 0x07, 0xec, 0xaf, 0x19, 0x3f, 0x87, 0xc0,
	0xdf, 0x75, 0x71, 0x7b, 0xd0, 0x19, 0xfd, 0x9f, 0x1c, 0x8f, 0xbd, 0x7b, 0x67, 0x4b, 0x83, 0xd2,
	0xcf, 0xfc, 0x82, 0x0c, 0xf3, 0x92, 0x14, 0xea, 0x83, 0x0b, 0xfa, 0xc0, 0x5e, 0x11, 0xf3, 0x83,
	0xb3, 0x10, 0xd8, 0x1c, 0xd5, 0x2a, 0xb9, 0x85, 0xe8, 0xa5, 0xa4, 0x25, 0x16, 0x92, 0x9f, 0x40,
	0x20, 0xad, 0x45, 0x5b, 0x71, 0xdd, 0x74, 0x73, 0xe0, 0x31, 0x44, 0x85, 0x74, 0x4e, 0x7c, 0xc8,
	0xb8, 0x5d, 0xdd, 0xdf, 0x1d, 0x27, 0x3f, 0x0c, 0x3a, 0xf7, 0x6e, 0xc5, 0x2f, 0x20, 0x9a, 0x4b,
	0xeb, 0x7c, 0x8a, 0x5e, 0x95, 0xd3, 0x8b, 0xfb, 0x47, 0xd5, 0xe7, 0xd6, 0x9d, 0xfc, 0xe3, 0x67,
	0xbe, 0xad, 0xa2, 0x2d, 0xe2, 0x73, 0xed, 0x21, 0x43, 0x08, 0xa7, 0x56, 0x0a, 0x92, 0x7c, 0xd3,
	0x77, 0x57, 0x6e, 0x0f, 0x1c, 0x41, 0x34, 0x93, 0x8e, 0x2c, 0x7e, 0xd7, 0x91, 0x43, 0x08, 0x1f,
	0xc4, 0x72, 0x5d, 0x9a, 0x06, 0xca, 0x54, 0x3a, 0x42, 0x2b, 0x1b, 0x28, 0x67, 0xd2, 0xe4, 0xf5,
	0xbb, 0x2b, 0x25, 0xf9, 0x42, 0x75, 0xe4, 0x15, 0x04, 0x19, 0x09, 0x5b, 0xcb, 0x5d, 0x02, 0xcb,
	0x08, 0x4d, 0x83, 0x84, 0x8f, 0x5f, 0x06, 0x5d, 0x93, 0xff, 0x38, 0x45, 0x4d, 0x42, 0xe9, 0x3a,
	0xf2, 0x1a, 0xba, 0x99, 0x16, 0xc6, 0x7d, 0x22, 0x35, 0x40, 0x53, 0xcc, 0xf3, 0x85, 0x58, 0xae,
	0x6b, 0xd0, 0x45, 0x58, 0xbd, 0x96, 0x9b, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc4, 0xf6, 0x9f,
	0x8d, 0x3a, 0x03, 0x00, 0x00,
}
