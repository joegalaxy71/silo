syntax = "proto3";
package api;

//import "google/api/annotations.proto";

// messages

message Outcome {
    bool error = 1;
    string message = 2;
}

message Unit {
    string Name = 1;
}

message Units {
    repeated Units Unit = 1;
}

message Node {
    Outcome Outcome = 1;
    string Hostname = 2;
    string Ip = 3;
    string Poolname = 4;
    string Type = 5; //M=master W=worker
}

message Nodes {
    Outcome Outcome = 1;
    repeated Nodes Node = 2;
}

message Solution {
    Outcome Outcome = 1;
    string Name = 2;
}

message Solutions {
    Outcome Outcome = 1;
    repeated Solutions Solution = 2;
}

message Void {

}



// services

service Asdd {
    rpc Version(Void) returns (Outcome) {}
    rpc Init(Node) returns (Node) {}
    rpc NodeAdd(Node) returns (Node) {}
    rpc NodeRemove(Node) returns (Node) {}
    rpc NodePurge(Node) returns (Node) {}
    rpc Create(Solution) returns (Solution) {} //+1 -> available
    rpc Destroy(Solution) returns (Solution) {} //-1 ->missing
    rpc Backup(Solution) returns (Solution) {}
    rpc Restore(Solution) returns (Solution) {}
    rpc Deploy(Solution) returns (Solution) {} //+1 -> deployed
    rpc Retreat(Solution) returns (Solution) {} //-1 -> available
    rpc Start(Solution) returns (Solution) {} //+1 -> started
    rpc Stop(Solution) returns (Solution) {} //-1 -> deployed
    rpc Expose(Solution) returns (Solution) {} //+1 -> exposed
    rpc Contain(Solution) returns (Solution) {} //-1 ->started
    rpc Snapshot(Solution) returns (Solution) {}
    rpc Rollback(Solution) returns (Solution) {}
}

service AsdLet {
    rpc Version(Void) returns (Outcome) {}
    rpc NodeAdd(Node) returns (Node) {}
    rpc NodeRemove(Node) returns (Node) {}
    rpc NodePurge(Node) returns (Node) {}
    rpc Deploy(Solution) returns (Solution) {} //+1 -> deployed
    rpc Retreat(Solution) returns (Solution) {} //-1 -> available
    rpc Start(Solution) returns (Solution) {} //+1 -> started
    rpc Stop(Solution) returns (Solution) {} //-1 -> deployed
    rpc Expose(Solution) returns (Solution) {} //+1 -> exposed
    rpc Contain(Solution) returns (Solution) {} //-1 ->started
}
